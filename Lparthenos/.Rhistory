p1 <- ggplot(tr_l_TEtr, aes(x, y)) +
#stat_binhex(colour="black", show.legend = F,na.rm = T)
geom_point(colour="black", show.legend = F,alpha=0.5)+
scale_fill_gradient(
low ="white",
high = "red",
space = "Lab",
na.value = "white",
guide = "colourbar",
aesthetics = "fill",
name="count"
) +
geom_abline(intercept = 0,slope = 1)+
xlim(0,3.3) +
ylim(0,3.5) +
xlab(expression(log[10]*('Simulated counts'+ 1)))+
ylab(expression(log[10]*('TEtranscripts counts'+ 1)))+
annotate("text",x=0.4,y=3.5, label="r=0.75")+
annotate("text",x=0.6,y=3.25,label="MARD=0.07")+
theme_linedraw(base_size = 12,element_text(size=10))
p2 <- ggplot(tr_l_eATE, aes(x, y)) +
geom_point(colour="black", show.legend = F,alpha=0.5)+
scale_fill_gradient(
low ="white",
high = "red",
space = "Lab",
na.value = "white",
guide = "colourbar",
aesthetics = "fill",
name="count"
) +
geom_abline(intercept = 0,slope = 1)+
xlim(0,3.3) +
ylim(0,3.5) +
xlab(expression(log[10]*('Simulated counts'+ 1)))+
ylab(expression(log[10]*('ExplorATE counts'+ 1)))+
annotate("text",x=0.4,y=3.5, label="r=0.81")+
annotate("text",x=0.6,y=3.25,label="MARD=0.06")+
theme_linedraw(base_size = 12,element_text(size=10))
grid.arrange(p1,p2,
widths=c(3,3)
)
eATE
RSEM
df <- cbind(eATE[1,5],TEtranscripts[1,2],RSEM[1,c(3,5)])[-1,]
for(i in RM.reference$V1){
df <- rbind(df,cbind(
ifelse(length(eATE[eATE$Name==i,5])==0,NA,eATE[eATE$Name==i,5]),
ifelse(length(TEtranscripts[TEtranscripts$gene.TE==i,2])==0,NA,TEtranscripts[TEtranscripts$gene.TE==i,2]),
ifelse(length(RSEM[RSEM$transcript_id==i,5])==0,NA,RSEM[RSEM$transcript_id==i,c(3,5)])
)
)
}
##ExplorATE
#eATE.sf <- tximport::tximport(files = "~/work/misScripts/ExplorATE/vignettes/out/salmon_out/hs38GC36/sim_hs38_GC36bAll_ov_q/quant.sf", type = "salmon",tx2gene = RM.reference)
eATE.sf <- tximport::tximport(files = "~/work/misMS/RTEsfromRNAseq/benchmark/transcriptome_full_isoforms/out/salmon_out/hs38GC36/sim_hs38_GC36bAll_ov_q/quant.sf", type = "salmon",tx2gene = RM.reference)
eATE.sf
#creando un data.frame con todos
df.sf <- data.frame(
ID=vector(),
RSEM.counts=vector(),
RSEM.len=vector(),
ExplorATE.counts=vector(),
ExplorATE.len=vector(),
SalmonTE.counts=vector(),
SalmonTE.len=vector(),
TEtran.counts=vector(),
TEtran.len=vector()
)
for(i in 1:nrow(RSEM.sf$counts)){
ID <- row.names(RSEM.sf$counts)[i]
df.sf[i,"ID"] <- ID
df.sf[i,"RSEM.counts"] <- ifelse(length(RSEM.sf$counts[row.names(RSEM.sf$counts)==ID])!=0,RSEM.sf$counts[row.names(RSEM.sf$counts)==ID],NA)
df.sf[i,"RSEM.len"] <- ifelse(length(RSEM.sf$length[row.names(RSEM.sf$length)==ID])!=0,RSEM.sf$length[row.names(RSEM.sf$length)==ID],NA)
df.sf[i,"ExplorATE.counts"] <- ifelse(length(eATE.sf$counts[row.names(eATE.sf$counts)==ID])!=0,eATE.sf$counts[row.names(eATE.sf$counts)==ID],NA)
df.sf[i,"ExplorATE.len"] <- ifelse(length(eATE.sf$length[row.names(eATE.sf$length)==ID])!=0,eATE.sf$length[row.names(eATE.sf$length)==ID],NA)
df.sf[i,"SalmonTE.counts"] <- ifelse(length(salmonTE.sf$counts[row.names(salmonTE.sf$counts)==ID])!=0,salmonTE.sf$counts[row.names(salmonTE.sf$counts)==ID],NA)
df.sf[i,"SalmonTE.len"] <- ifelse(length(salmonTE.sf$length[row.names(salmonTE.sf$length)==ID])!=0,salmonTE.sf$length[row.names(salmonTE.sf$length)==ID],NA)
df.sf[i,"TEtran.counts"] <- ifelse(length(TEtrans.sf$counts[row.names(TEtrans.sf$counts)==ID])!=0,TEtrans.sf$counts[row.names(TEtrans.sf$counts)==ID],NA)
df.sf[i,"TEtran.len"] <- ifelse(length(TEtrans.sf$length[row.names(TEtrans.sf$length)==ID])!=0,TEtrans.sf$length[row.names(TEtrans.sf$length)==ID],NA)
}
#Calculando TPM para cada set de datos
RPK.RSEM <- df.sf$RSEM.counts/df.sf$RSEM.len
factor.RSEM <- sum(RPK.RSEM, na.rm = T)/1e6
df.sf$TPM.RSEM <- RPK.RSEM/factor.RSEM
RPK.ExplorATE <- df.sf$ExplorATE.counts/df.sf$ExplorATE.len
factor.ExplorATE <- sum(RPK.ExplorATE, na.rm = T)/1e6
df.sf$TPM.ExplorATE <- RPK.ExplorATE/factor.ExplorATE
RPK.SalmonTE <- df.sf$SalmonTE.counts/df.sf$SalmonTE.len
factor.SalmonTE <- sum(RPK.SalmonTE, na.rm = T)/1e6
df.sf$TPM.SalmonTE <- RPK.SalmonTE/factor.SalmonTE
RPK.TEt <- df.sf$TEtran.counts/df.sf$ExplorATE.len
#RPK.TEt[693] <- 0
factor.TEt <- sum(RPK.TEt, na.rm = T)/1e6
df.sf$TPM.TEtr <- RPK.TEt/factor.TEt
#comprobando como se ve...
par(mfrow=c(2,3))
plot(log(base=10,df.sf$RSEM.counts+1),log(base=10,df.sf$SalmonTE.counts+1))
abline(a=0,b=1)
plot(log(base=10,df.sf$RSEM.counts+1),log(base=10,df.sf$TEtran.counts+1))
abline(a=0,b=1)
plot(log(base=10,df.sf$RSEM.counts+1),log(base=10,df.sf$ExplorATE.counts+1))
abline(a=0,b=1)
#par(mfrow=c(1,3))
plot(log(base=10,df.sf$TPM.RSEM+1),log(base=10,df.sf$TPM.SalmonTE+1))
abline(a=0,b=1)
plot(log(base=10,df.sf$TPM.RSEM+1),log(base=10,df.sf$TPM.TEtr+1))
abline(a=0,b=1)
plot(log(base=10,df.sf$TPM.RSEM+1),log(base=10,df.sf$TPM.ExplorATE+1))
abline(a=0,b=1)
#calculando Spearman correlations, solo con los que no son cero en RSEM
#counts
cor.count.sTE <- cbind(df.sf$RSEM.counts, df.sf$SalmonTE.counts)
#cor.count.sTE <-cor.count.sTE[!(cor.count.sTE[,1]==0),]
#cor.count.sTE <-cor.count.sTE[!(cor.count.sTE[,2]==0),]
round(cor(cor.count.sTE[,1],cor.count.sTE[,2], method=c("spearman"),use = "complete.obs"),2)
cor.count.TEt <- cbind(df.sf$RSEM.counts, df.sf$TEtran.counts)
#cor.count.TEt <-cor.count.TEt[!(cor.count.sTE[,1]==0),]
#cor.count.TEt <-cor.count.TEt[!(cor.count.sTE[,2]==0),]
round(cor(cor.count.TEt[,1],cor.count.TEt[,2], method=c("spearman"),use = "complete.obs"),2)
cor.count.eATE <- cbind(df.sf$RSEM.counts, df.sf$ExplorATE.counts)
#cor.count.eATE <-cor.count.eATE[!(cor.count.eATE[,1]==0),]
#cor.count.eATE <-cor.count.eATE[!(cor.count.eATE[,2]==0),]
round(cor(cor.count.eATE[,1],cor.count.eATE[,2], method=c("spearman")),2)
#TPMs
cor.tpm.sTE <- cbind(df.sf$TPM.RSEM, df.sf$TPM.SalmonTE)
#cor.tpm.sTE <-cor.tpm.sTE[!(cor.tpm.sTE[,1]==0),]
#cor.tpm.sTE <-cor.tpm.sTE[!(cor.tpm.sTE[,2]==0),]
round(cor(cor.tpm.sTE[,1],cor.tpm.sTE[,2], method=c("spearman"),use = "complete.obs"),2)
cor.tpm.TEt <- cbind(df.sf$TPM.RSEM, df.sf$TPM.TEtr)
#cor.tpm.TEt <-cor.tpm.TEt[!(cor.tpm.TEt[,1]==0),]
#cor.tpm.TEt <-cor.tpm.TEt[!(cor.tpm.TEt[,2]==0),]
round(cor(cor.tpm.TEt[,1],cor.tpm.TEt[,2], method=c("spearman"),use = "complete.obs"),2)
cor.tpm.eATE <- cbind(df.sf$TPM.RSEM, df.sf$TPM.ExplorATE)
#cor.tpm.eATE <-cor.tpm.eATE[!(cor.tpm.eATE[,1]==0),]
#cor.tpm.eATE <-cor.tpm.eATE[!(cor.tpm.eATE[,2]==0),]
round(cor(cor.tpm.eATE[,1],cor.tpm.eATE[,2], method=c("spearman"),use = "complete.obs"),2)
#calculando MARD
#counts
df.sf$MARDi_sTE <- abs(df.sf$SalmonTE.counts-df.sf$RSEM.counts)/(df.sf$SalmonTE.counts+df.sf$RSEM.counts)
df.sf
sort(df.sf$TPM.ExplorATE, decreasing = T)
order(df.sf$TPM.ExplorATE, decreasing = T)
df.sf[order(df.sf$TPM.ExplorATE, decreasing = T),]
df.sf[order(df.sf$TPM.ExplorATE, decreasing = T),c(1,4,11)]
RM.reference
ExplorATE_res <- df.sf[order(df.sf$TPM.ExplorATE, decreasing = T),c(1,4,11)]
read.table("~/work/misMS/RTEsfromRNAseq/benchmark/transcriptome_full_isoforms/RM.allisoform.out")
read.table("~/work/misMS/RTEsfromRNAseq/benchmark/transcriptome_full_isoforms/RM.allisoform.out", header = T)
ExplorATE_res
rm_all <- read.table("~/work/misMS/RTEsfromRNAseq/benchmark/transcriptome_full_isoforms/RM.allisoform.out", header = T)
apply(ExplorATE_res, 1,function(x){rm_all[rm_all$namRep==x[1],c("namRep","classRep")})
apply(ExplorATE_res, 1,function(x){rm_all[rm_all$namRep==x[1],c("namRep","classRep")]})
apply(ExplorATE_res, 1,function(x){unique(rm_all[rm_all$namRep==x[1],c("namRep","classRep")])})
unlist(apply(ExplorATE_res, 1,function(x){unique(rm_all[rm_all$namRep==x[1],c("namRep","classRep")])}))
apply(ExplorATE_res, 1,function(x){unique(rm_all[rm_all$namRep==x[1],"classRep"])})
ExplorATE_res$classRep <- apply(ExplorATE_res, 1,function(x){unique(rm_all[rm_all$namRep==x[1],"classRep"])})
ExplorATE_res
boxplot(ExplorATE_res$TPM.ExplorATE~ExplorATE_res$classRep)
boxplot(ExplorATE_res$TPM.ExplorATE~ExplorATE_res$classRep)
boxplot(log(base=10,ExplorATE_res$TPM.ExplorATE+1)~ExplorATE_res$classRep)
boxplot(log(base=10,ExplorATE_res$TPM.ExplorATE)~ExplorATE_res$classRep)
tapply(ExplorATE_res$TPM.ExplorATE, ExplorATE_res$classRep, length)
z <- tapply(ExplorATE_res$TPM.ExplorATE, ExplorATE_res$classRep, length)
z[z<3]
z[z<5]
names(z[z<5])
ExplorATE_res_2 <- ExplorATE_res[ExplorATE_res$classRep%!in%names(z[z<5]),]
ExplorATE_res_2
boxplot(log(base=10,ExplorATE_res_2$TPM.ExplorATE)~ExplorATE_res_2$classRep)
boxplot(log(base=10,ExplorATE_res_2$TPM.ExplorATE)~ExplorATE_res_2$classRep, las=1)
boxplot(log(base=10,ExplorATE_res_2$TPM.ExplorATE)~ExplorATE_res_2$classRep, las=2)
boxplot(log(base=2,ExplorATE_res_2$TPM.ExplorATE)~ExplorATE_res_2$classRep, las=2)
boxplot(ExplorATE_res_2$TPM.ExplorATE~ExplorATE_res_2$classRep, las=2)
boxplot(ln(ExplorATE_res_2$TPM.ExplorATE)~ExplorATE_res_2$classRep, las=2)
boxplot(log(ExplorATE_res_2$TPM.ExplorATE)~ExplorATE_res_2$classRep, las=2)
ExplorATE_res_2
ExplorATE_res_2[is.na(ExplorATE_res_2$classRep)]
ExplorATE_res_2[is.na(ExplorATE_res_2$classRep),]
tapply(ExplorATE_res$TPM.ExplorATE, ExplorATE_res$classRep, mean)
z <- tapply(ExplorATE_res$TPM.ExplorATE, ExplorATE_res$classRep, mean)
z[!z==0]
z <- tapply(ExplorATE_res$TPM.ExplorATE, ExplorATE_res$classRep, function(x){ mean(log(base=10,x))})
z[!z==0]
z <- tapply(ExplorATE_res$TPM.ExplorATE, ExplorATE_res$classRep, function(x){ mean(log(base=10,x+1))})
z[!z==0]
barplot(z[!z==0])
barplot(z[!z==0], las=2)
barplot(sort(z[!z==0]), las=2)
barplot(sort(z[!z==0], decreasing = T), las=2)
par(oma=c(7,3,3,3))
barplot(sort(z[!z==0], decreasing = T), las=2)
ExplorATE_res_2$FAM <- ExplorATE::split.vec(ExplorATE_res_2$classRep,"/",1)
ExplorATE_res_2$FAM
z <- tapply(ExplorATE_res_2$TPM.ExplorATE, ExplorATE_res_2$classRep, function(x){ mean(log(base=10,x+1))})
par(oma=c(7,3,3,3))
barplot(sort(z[!z==0], decreasing = T), las=2)
z <- tapply(ExplorATE_res_2$TPM.ExplorATE, ExplorATE_res_2$FAM, function(x){ mean(log(base=10,x+1))})
par(oma=c(7,3,3,3))
barplot(sort(z[!z==0], decreasing = T), las=2)
boxplot(log(ExplorATE_res_2$TPM.ExplorATE)~ExplorATE_res_2$FAM, las=2)
boxplot(ExplorATE_res_2$TPM.ExplorATE~ExplorATE_res_2$FAM, las=2)
boxplot(log(base=10,ExplorATE_res_2$TPM.ExplorATE)~ExplorATE_res_2$FAM, las=2)
barplot(sort(z[!z==0], decreasing = T), las=2)
z
tapply(ExplorATE_res_2$TPM.ExplorATE, ExplorATE_res_2$FAM, function(x) sd(log(base=10,x+1))/sqrt(length(log(base=10,x+1))))
z <- tapply(ExplorATE_res$TPM.ExplorATE, ExplorATE_res$classRep, length)
z
z <- tapply(ExplorATE_res_2$TPM.ExplorATE, ExplorATE_res_2$classRep, function(x){ mean(log(base=10,x+1))})
z
tapply(ExplorATE_res_2$TPM.ExplorATE, ExplorATE_res_2$classRep, function(x) sd(log(base=10,x+1))/sqrt(length(log(base=10,x+1))))
tapply(ExplorATE_res_2$TPM.ExplorATE, ExplorATE_res_2$classRep, function(x) sd(log(base=10,x+1))/sqrt(length(log(base=10,x+1))))
tapply(ExplorATE_res_2$TPM.ExplorATE, ExplorATE_res_2$classRep, function(x) sd(log(base=10,x+1))/sqrt(length(log(base=10,x+1))))
devtools::install_github("FemeniasM/ExplorATEproject")
??ExplorATE
ExplorATE::idTEsProt
devtools::install_github("FemeniasM/ExplorATEproject")
devtools::install_github("FemeniasM/ExplorATEproject")
ExplorATE::idTEsProt
ExplorATE::mk.reference()
??ExplorATE::run.salmon()
??run.salmon()
?edgeR::calcNormFactors()
paste(paste0("INDEX_PATH=",paste0(pwd,index),";"),
paste0("DECOYS_PATH=",normalizePath(decoys),";"),
paste0("READS_PATH=",normalizePath(lib_dir),";"),
paste0("TRME_PATH=",normalizePath(trme),";"),
"cd", paste0(pwd,"/salmon_out;"),
salmon_path, "index -t", "$TRME_PATH",
"-k", kmer,
"-i", "$INDEX_PATH",
"--decoys", "$DECOYS_PATH", "|| exit 1 &&",
"lista=`ls $READS_PATH/*R1.fastq.gz | sed s/_R1.fastq.gz//g`;",
"cd", paste0(pwd,"/salmon_out;"),
"for fn in ${lista}; do",salmon_path, "quant -i", "$INDEX_PATH",
"-l A --gcBias",
"--useVBOpt",
"-1", "${fn}_R1.fastq.gz",
"-2", "${fn}_R2.fastq.gz",
"-p", threads, "--validateMappings",
"-o", paste0("temp/",index,"/${fn}_q;"),"done","|| exit 1 &&",
"mv",paste0("temp/",index,"$READS_PATH/*"),paste0(pwd,"/salmon_out/"),"|| exit 1 &&",
"rm -r temp/"
)
pwd <- getwd()
paste(paste0("INDEX_PATH=",paste0(pwd,index),";"),
paste0("DECOYS_PATH=",normalizePath(decoys),";"),
paste0("READS_PATH=",normalizePath(lib_dir),";"),
paste0("TRME_PATH=",normalizePath(trme),";"),
"cd", paste0(pwd,"/salmon_out;"),
salmon_path, "index -t", "$TRME_PATH",
"-k", kmer,
"-i", "$INDEX_PATH",
"--decoys", "$DECOYS_PATH", "|| exit 1 &&",
"lista=`ls $READS_PATH/*R1.fastq.gz | sed s/_R1.fastq.gz//g`;",
"cd", paste0(pwd,"/salmon_out;"),
"for fn in ${lista}; do",salmon_path, "quant -i", "$INDEX_PATH",
"-l A --gcBias",
"--useVBOpt",
"-1", "${fn}_R1.fastq.gz",
"-2", "${fn}_R2.fastq.gz",
"-p", threads, "--validateMappings",
"-o", paste0("temp/",index,"/${fn}_q;"),"done","|| exit 1 &&",
"mv",paste0("temp/",index,"$READS_PATH/*"),paste0(pwd,"/salmon_out/"),"|| exit 1 &&",
"rm -r temp/"
)
paste0("awk '{a=$0; getline;split(a, b, "),'":");  r[b[1]] = r[b[1]]""$0} END { for (k in r) { print k"\n"r[k] } }',"'",' genome_found.fa > decoy.fa"')
paste0("awk '{a=$0; getline;split(a, b, ",'":");  r[b[1]] = r[b[1]]""$0} END { for (k in r) { print k"\n"r[k] } }',"'",' genome_found.fa > decoy.fa"')
paste(bedtools,"getfasta -fi",trme,"-bed RM.ovres.bed -name -fo Rep.fa")
1090-687
7301-1095
BED <- matrix(c("a", "a", "c", "c", "b", "d"), c(1, 2,4,1,2,1), c(2, 3,1,4,2,7))
BED
BED <- cbind(c("a", "a", "c", "c", "b", "d"), c(1, 2,4,1,2,1), c(2, 3,1,4,2,7))
BED
BED[order(BED[,1],BED[,2], BED[,3])]
BED[order(BED[,1],BED[,2], BED[,3]),]
install.packages("roxygen2")
install.packages(c("stringr","foreach","doParallel"))
install.packages(c("BiocManager","devtools"))
BiocManager::install(c("readr","GenomicRanges", "IRanges","csaw", "edgeR","SummarizedExperiment","DESeq2", "tximport"))
install.packages("~/work/misMS/RTEsfromRNAseq/ExplorATE_package_20210510/ExplorATE_0.1.tar.gz", type = "source")
install.packages("~/work/misMS/RTEsfromRNAseq/ExplorATE_package_20210510/ExplorATE_0.1.tar.gz", type = "source")
log(8,base = 2)
exp(8)
#RSEM <- read.table("~/work/misMS/RTEsfromRNAseq/benchmark/RSEM_sim/sim_hs38_GC36bAll_ov.sim.isoforms.results", header = T)#estos son los conteos simulados
RSEM <- read.table("~/work/misMS/RTEsfromRNAseq/benchmark/RSEM_sim/sim_hs38_GC36bAll_ov_5M.sim.isoforms.results", header = T)#estos son los conteos simulados
TEtranscripts <- read.table("~/work/misMS/RTEsfromRNAseq/benchmark/TEtranscripts/GENCODE_transcript.cntTable", header = T)
#RM.reference <- read.table("~/work/misScripts/ExplorATE/vignettes/out/references.csv", header = F, sep=";")
RM.reference <- read.table("~/work/misMS/RTEsfromRNAseq/benchmark/transcriptome_full_isoforms/out/references.csv", header = F, sep=";")  #---> Nueva corrida en darwinii
data.plot <- as.data.frame(cbind(log(df$NumReads.RSEM+1),log(df$NumReads.eATE+1)))
plot(data.plot$sim.counts,data.plot$ExplorATE.counts, pch=16)
#eATE.sf <- tximport::tximport(files = "~/work/misScripts/ExplorATE/vignettes/out/salmon_out/hs38GC36/sim_hs38_GC36bAll_ov_q/quant.sf", type = "salmon",tx2gene = RM.reference)
eATE.sf <- tximport::tximport(files = "~/work/misMS/RTEsfromRNAseq/benchmark/transcriptome_full_isoforms/out/salmon_out/hs38GC36/sim_hs38_GC36bAll_ov_q/quant.sf", type = "salmon",tx2gene = RM.reference)
#eATE.sf <- tximport::tximport(files = "~/work/misMS/RTEsfromRNAseq/benchmark/transcriptome_OnlyExp_isoforms/out/salmon_out/sim_hs38_GC36bAll_ov_q/quant.sf", type = "salmon",tx2gene = RM.reference)#---> sin isoformas no expresadas
eATE.sf <- tximport::tximport(files = "~/work/misMS/RTEsfromRNAseq/benchmark/transcriptome_full_isoforms/quant_5M.sf", type = "salmon",tx2gene = RM.reference)
TEtrans.sf <- tximport::tximport(files = "~/work/misMS/RTEsfromRNAseq/benchmark/TEtranscripts/TEtran_quant.sf", type = "salmon",tx2gene = RM.reference)
salmonTE.sf <- tximport::tximport(files = "~/work/misMS/RTEsfromRNAseq/benchmark/SalmonTE_counts/sim_hs38_GC36bAll_ov/quant.sf", type = "salmon",txOut=T)
df.sf <- data.frame(
ID=vector(),
RSEM.counts=vector(),
RSEM.len=vector(),
ExplorATE.counts=vector(),
ExplorATE.len=vector(),
SalmonTE.counts=vector(),
SalmonTE.len=vector(),
TEtran.counts=vector(),
TEtran.len=vector()
)
for(i in 1:nrow(RSEM.sf$counts)){
ID <- row.names(RSEM.sf$counts)[i]
df.sf[i,"ID"] <- ID
df.sf[i,"RSEM.counts"] <- ifelse(length(RSEM.sf$counts[row.names(RSEM.sf$counts)==ID])!=0,RSEM.sf$counts[row.names(RSEM.sf$counts)==ID],NA)
df.sf[i,"RSEM.len"] <- ifelse(length(RSEM.sf$length[row.names(RSEM.sf$length)==ID])!=0,RSEM.sf$length[row.names(RSEM.sf$length)==ID],NA)
df.sf[i,"ExplorATE.counts"] <- ifelse(length(eATE.sf$counts[row.names(eATE.sf$counts)==ID])!=0,eATE.sf$counts[row.names(eATE.sf$counts)==ID],NA)
df.sf[i,"ExplorATE.len"] <- ifelse(length(eATE.sf$length[row.names(eATE.sf$length)==ID])!=0,eATE.sf$length[row.names(eATE.sf$length)==ID],NA)
df.sf[i,"SalmonTE.counts"] <- ifelse(length(salmonTE.sf$counts[row.names(salmonTE.sf$counts)==ID])!=0,salmonTE.sf$counts[row.names(salmonTE.sf$counts)==ID],NA)
df.sf[i,"SalmonTE.len"] <- ifelse(length(salmonTE.sf$length[row.names(salmonTE.sf$length)==ID])!=0,salmonTE.sf$length[row.names(salmonTE.sf$length)==ID],NA)
df.sf[i,"TEtran.counts"] <- ifelse(length(TEtrans.sf$counts[row.names(TEtrans.sf$counts)==ID])!=0,TEtrans.sf$counts[row.names(TEtrans.sf$counts)==ID],NA)
df.sf[i,"TEtran.len"] <- ifelse(length(TEtrans.sf$length[row.names(TEtrans.sf$length)==ID])!=0,TEtrans.sf$length[row.names(TEtrans.sf$length)==ID],NA)
}
class(df.sf$TEtran.counts)
RPK.RSEM <- df.sf$RSEM.counts/df.sf$RSEM.len
factor.RSEM <- sum(RPK.RSEM, na.rm = T)/1e6
df.sf$TPM.RSEM <- RPK.RSEM/factor.RSEM
RPK.ExplorATE <- df.sf$ExplorATE.counts/df.sf$RSEM.len
factor.ExplorATE <- sum(RPK.ExplorATE, na.rm = T)/1e6
df.sf$TPM.ExplorATE <- RPK.ExplorATE/factor.ExplorATE
RPK.SalmonTE <- df.sf$SalmonTE.counts/df.sf$SalmonTE.len
factor.SalmonTE <- sum(RPK.SalmonTE, na.rm = T)/1e6
df.sf$TPM.SalmonTE <- RPK.SalmonTE/factor.SalmonTE
RPK.TEt <- df.sf$TEtran.counts/df.sf$TEtran.len
RPK.TEt[693] <- 0
factor.TEt <- sum(RPK.TEt, na.rm = T)/1e6
df.sf$TPM.TEtr <- RPK.TEt/factor.TEt
par(mfrow=c(1,3))
plot(log(base=10,df.sf$RSEM.counts+1),log(base=10,df.sf$SalmonTE.counts+1))
abline(a=0,b=1)
plot(log(base=10,df.sf$RSEM.counts+1),log(base=10,df.sf$TEtran.counts+1))
abline(a=0,b=1)
plot(log(base=10,df.sf$RSEM.counts+1),log(base=10,df.sf$ExplorATE.counts+1))
abline(a=0,b=1)
par(mfrow=c(1,3))
plot(log(base=10,df.sf$TPM.RSEM+1),log(base=10,df.sf$TPM.SalmonTE+1))
abline(a=0,b=1)
plot(log(base=10,df.sf$TPM.RSEM+1),log(base=10,df.sf$TPM.TEtr+1))
abline(a=0,b=1)
plot(log(base=10,df.sf$TPM.RSEM+1),log(base=10,df.sf$TPM.ExplorATE+1))
abline(a=0,b=1)
cor.count.eATE <- cbind(df.sf$RSEM.counts, df.sf$ExplorATE.counts)
cor.count.eATE <-cor.count.eATE[!(cor.count.eATE[,1]==0),]
cor.count.eATE <-cor.count.eATE[!(cor.count.eATE[,2]==0),]
round(cor(cor.count.eATE[,1],cor.count.eATE[,2], method=c("spearman")),2)
cor.count.sTE <- cbind(df.sf$RSEM.counts, df.sf$SalmonTE.counts)
cor.count.sTE <-cor.count.sTE[!(cor.count.sTE[,1]==0),]
cor.count.sTE <-cor.count.sTE[!(cor.count.sTE[,2]==0),]
round(cor(cor.count.sTE[,1],cor.count.sTE[,2], method=c("spearman"),use = "complete.obs"),2)
round(cor.test(cor.count.eATE[,1],cor.count.eATE[,2], method=c("spearman")),2)
cor.test(cor.count.eATE[,1],cor.count.eATE[,2], method=c("spearman"))
round(cor(cor.count.eATE[,1],cor.count.eATE[,2], method=c("spearman")),2)
cor.test(cor.count.sTE[,1],cor.count.sTE[,2], method=c("spearman"),use = "complete.obs")
cor.test(cor.count.sTE[,1],cor.count.sTE[,2], method=c("spearman"),use = "complete.obs",alternative = "two.sided")
cor.test(cor.count.sTE[,1],cor.count.sTE[,2], method="spearman",use = "complete.obs",alternative = "two.sided",)
cor.test(cor.count.sTE[,1],cor.count.sTE[,2], method="spearman",alternative = "two.sided",)
cor.test(cor.count.sTE[,1],cor.count.sTE[,2], method="spearman",alternative = "two.sided",)
cor.test(cor.count.sTE[,1],cor.count.sTE[,2], method="spearman",alternative = "two.sided")
cor.test(cor.count.sTE[,1],cor.count.sTE[,2], method="spearman")
cor.test(cor.count.sTE[,1],cor.count.sTE[,2], method="spearman",exact = T)
cor.test(cor.count.sTE[,1],cor.count.sTE[,2], method="spearman",exact = F)
cor.test(cor.count.sTE[,1],cor.count.sTE[,2], method="spearman",exact = F,alternative = "two.sides")
cor.test(cor.count.sTE[,1],cor.count.sTE[,2], method="spearman",exact = F,alternative = "two.sided")
cor.test(cor.count.TEt[,1],cor.count.TEt[,2], method=c("spearman"),use = "complete.obs")
cor.test(cor.tpm.eATE[,1],cor.tpm.eATE[,2], method=c("spearman"),use = "complete.obs")
cor.test(cor.tpm.sTE[,1],cor.tpm.sTE[,2], method=c("spearman"),use = "complete.obs")
cor.test(cor.tpm.TEt[,1],cor.tpm.TEt[,2], method=c("spearman"),use = "complete.obs")
cor.count.eATE <- cbind(df.sf$RSEM.counts, df.sf$ExplorATE.counts)
cor.count.eATE <-cor.count.eATE[!(cor.count.eATE[,1]==0),]
cor.count.eATE <-cor.count.eATE[!(cor.count.eATE[,2]==0),]
round(cor(cor.count.eATE[,1],cor.count.eATE[,2], method=c("spearman")),2)
cor.test(cor.count.eATE[,1],cor.count.eATE[,2], method=c("spearman"), )
cor.count.sTE <- cbind(df.sf$RSEM.counts, df.sf$SalmonTE.counts)
cor.count.sTE <-cor.count.sTE[!(cor.count.sTE[,1]==0),]
cor.count.sTE <-cor.count.sTE[!(cor.count.sTE[,2]==0),]
round(cor(cor.count.sTE[,1],cor.count.sTE[,2], method=c("spearman"),use = "complete.obs"),2)
cor.test(cor.count.sTE[,1],cor.count.sTE[,2], method="spearman",exact = F,alternative = "two.sided")
setwd("~/work/misMS/RTEsfromRNAseq/ExplorATE_package_20210510/ExplorATE_data_test/drosophila/")
ExplorATE::run.salmon(index = "index_dm",
decoys = "decoys.txt",
salmon_path = "~/programs/salmon-latest_linux_x86_64/bin/salmon",
pe_se = "se",
kmer = 31,
trme = "trmeSalmon.fasta",
lib_dir = "reads",
threads = 12
)
dm_ref <- ExplorATE::mk.reference_mo(bedtools="bedtools",
GFFgen="dm_genannot.gtf",
genome="dm_genome.fa",
trme="dm_transcriptome.fa",
RMgen="dm_RMgen.out",
RMtr="dm_RMtr.out",
overlapping=T,
over.res="HS",
by="namRep",
threads=12,
outdir=".")
ExplorATE::run.salmon(index = "index_dm",
decoys = "decoys.txt",
salmon_path = "~/programs/salmon-latest_linux_x86_64/bin/salmon",
pe_se = "se",
kmer = 31,
trme = "trmeSalmon.fasta",
lib_dir = "reads",
threads = 12
)
ExplorATE::run.salmon(index = "index_dm",
decoys = "decoys.txt",
salmon_path = "~/programs/salmon-latest_linux_x86_64/bin/salmon",
pe_se = "se",
kmer = 31,
trme = "trmeSalmon.fasta",
lib_dir = "reads",
threads = 12
)
y <- ExplorATE::import.RTEs(
path.sal = "salmon_out/",
conditions = c("control", "piwi"),
ref.sal = dm_ref,
import_to = "edgeR"
)
y
RM
setwd("~/work/misMS/RTEsfromRNAseq/ExplorATE_parthenos/test_data/")
RM <- ExplorATE::read.RepMask("RM_parthenos.out")
RM <- RM[sample(1:nrow(RM),100000,replace = F),]
write.table(RM,"~/work/misMS/RTEsfromRNAseq/ExplorATE_package_20210510/ExplorATE_data_test/Lparthenos/RM_parthenos_1000000.out", sep = "\t")
write.table(RM,"~/work/misMS/RTEsfromRNAseq/ExplorATE_package_20210510/ExplorATE_data_test/Lparthenos/RM_parthenos_1000000.out", sep = "\t", quote = F, row.names = F, col.names = F)
setwd("~/work/misMS/RTEsfromRNAseq/ExplorATE_package_20210510/ExplorATE_data_test/Lparthenos")
RM <- ExplorATE::read.RepMask("RM_parthenos_1000000.out")
head(RM)
setwd("~/work/misMS/RTEsfromRNAseq/ExplorATE_package_20210510/ExplorATE_data_test/Lparthenos")
#RM <- ExplorATE::read.RepMask("RM_parthenos_1000000.out")
#head(RM)
Lp.references <- ExplorATE::mk.reference(
RepMask = "RM_parthenos.out",
gff3 = "longest_orfs.gff3",
anot = "blastx.outfmt6",
cleanTEsProt = T,
featureSum = T,
outdir = "Lparthenos_out",
rm.cotrans = T,
overlapping = T,
trme = "Lparthenos.fasta",
stranded = F,
by = "classRep",
threads = 12,
rule = c(0,0,0),
over.res= "HS",
annot_by = "transcripts"
)
RM <- ExplorATE::read.RepMask("RM_parthenos_1000000.out")
RM$namSeq
write.table(RM$namSeq,"RM_IDs.txt", sep = "\t", quote = F, row.names = F, col.names = F)
NOids <- read.table("fastaNOIds.txt", sep = ">")
head(NOids)
NOids <- read.table("fastaNOIds.txt", sep = ">")
head(NOids)
write.table(NOids$V2[sample(1:nrow(NOids),150000,replace = F)],"RM_NOIDs.txt", sep = "\t", quote = F, row.names = F, col.names = F)
write.table(NOids$V2[sample(1:nrow(NOids),100000,replace = F)],"RM_NOIDs.txt", sep = "\t", quote = F, row.names = F, col.names = F)
write.table(NOids$V2[sample(1:nrow(NOids),100000,replace = F)],"RM_NOIDs.txt", sep = "\t", quote = F, row.names = F, col.names = F)
write.table(NOids$V2[sample(1:nrow(NOids),80000,replace = F)],"RM_NOIDs.txt", sep = "\t", quote = F, row.names = F, col.names = F)
NOids <- read.table("fastaNOIds.txt", sep = " ")
head(NOids)
head(NOids)
NOids <- read.table("fastaNOIds.txt", sep = ">")
ExplorATE::split.vec(NOids$V2," ",1)
write.table(NOids.s[sample(1:nrow(NOids),80000,replace = F)],"RM_NOIDs.txt", sep = "\t", quote = F, row.names = F, col.names = F)
NOids.s <- ExplorATE::split.vec(NOids$V2," ",1)
write.table(NOids.s[sample(1:nrow(NOids),80000,replace = F)],"RM_NOIDs.txt", sep = "\t", quote = F, row.names = F, col.names = F)
length(NOids.s)
NOids.s <- NOids.s[sample(1:nrow(NOids),80000,replace = F)]
length(NOids.s)
write.table(NOids.s,"RM_NOIDs.txt", sep = "\t", quote = F, row.names = F, col.names = F)
#head(RM)
Lp.references <- ExplorATE::mk.reference(
RepMask = "RM_parthenos.out",
gff3 = "longest_orfs.gff3",
anot = "blastx.outfmt6",
cleanTEsProt = T,
featureSum = T,
outdir = "Lparthenos_out",
rm.cotrans = T,
overlapping = T,
trme = "fasta_sort.fa",
stranded = F,
by = "classRep",
threads = 12,
rule = c(0,0,0),
over.res= "HS",
annot_by = "transcripts"
)
use warnings()
warnings()
ExplorATE::run.salmon(index = "Lparthenos_index",
decoys = "Lparthenos_out/decoys.txt",
salmon_path = "~/programs/salmon-latest_linux_x86_64/bin/salmon",
pe_se = "pe",
kmer = 31,
trme = "Lparthenos_out/trmeSalmon.fasta",
lib_dir = "reads/",
threads = 12
)
